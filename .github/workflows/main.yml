name: DevSecOps Pipeline


on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main


jobs:
  gitleaks:
    name: Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Run Gitleaks
        id: gitleaks
        uses: DariuszPorowski/github-action-gitleaks@v2
        with:
          config: MyGitleaksConfigs/MyGitleaksConfig.toml
      
      - name: Upload Gitleaks JSON report to artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: gitleaks
          path: ${{ steps.gitleaks.outputs.report }}


  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [gitleaks]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  dependency_check:
    name: Dependency check Scan
    runs-on: ubuntu-latest
    needs: [sonarcloud]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: "test"
          path: "."
          format: "HTML"
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
          name: Depcheck report
          path: ${{github.workspace}}/reports


  tfsec:
    name: Tfsec
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@master
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        id: tfsec
        with:
#          soft_fail: true
          additional_args: --format=json  --out  tfscan-report.json
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
          name: tfsec
          path: ${{github.workspace}}/tfscan-report.json

  Trivy:
    name: Trivy Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build an image from Dockerfile
        run: |
          docker build -t name:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          format: 'json'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'